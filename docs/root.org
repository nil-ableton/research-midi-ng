* HD Protocol

This is the successor to MIDI developed behind closed doors by the HD
Working Group (HDWG) at the MIDI Manufacturers Association (MMA.)

Started in 2005. Demonstrated to some manufacturers on January 27, 2013.

** Proofs of life:
- http://www.midi.org/aboutus/news/hd.php
- [[http://www.kissbox.nl/downloads/Manuals/KissBox_CPU_V3_OEM_RTP-MIDI_HD_Integration_Manual.pdf][Kissbox CM-MIDI]] claims support for the HD Protocol already (only for
  members of the HDWG)
- Photo of a HD <-> CV interface HDCV88 http://www.muffwiggler.com/forum/viewtopic.php?t=49278&start=10&sid=d16d268b318c7cd3119093f590ce832d

** Information accessible from publicly accessible information

name: HD Protocol
creators: MMA HDWG members
known hardware implementation: KissBox Network CPU / Kissbox / B.Bouchez / (20/02/2014)

"access to HD firmware is restricted to MMA HDWG members until official publication of HD protocol
specification"

- based on 32 bits word
- a message is multiple 32 bits words
- no marker to identify the first word of a message
- messages for saving/restoring state of an HD network (dump settings from an "entity")
- real time messages vs beat-timestamped messages (with "bundles" at the same timestamp)
- variable length messages
- transports: USB, Ethernet
- plug & play of devices
- higher resolution controls
- more throughput
- MIDI Device compatibility
- traditional notes as well as direct pitch notes
- note update for per-note controls (control+pitch)
- has a transport protocol (USB + some protocol compatible with RTP-MIDI, while being independent)

Opinion:

"HD-MIDI promises to be improved and more versatile, and does so by
adding complexity in ways that not everybody will find
useful. HD-MIDI, at least, has industry consensus. If it is
sufficiently more effective than MIDI 1.0, it may yet form part of a
complete next-generation protocol." Ben Supper / Novation/Focusrite

* MIDI

Was initiated by Dave Smith at sequential instrument and emerged from
a collaboration with Oberheim, Roland. Robert Moog published the first
paper with the specs. Predecessor protocols: Roland DCB, Dave Smith's
USI.

** Why did it succeed?

- it was cheap
- it was good enough
- it provided some musical structure
- escaping (SYSEX) was possible
- serial, point to point network (basically what all technologies
  moved to today (Fabian Giesen 2014))
- undefined status bytes are ignored i.e. are safe to use with older hardware
- MIDI thru is a plain copy i.e. forward compatible

** Other characteristics

- the protocol influenced user interfaces a great deal (concepts such
  as channels, ports, cc(s) numbers, the piano roll

- graceful degradation of 14-bit capable controllers to a 7-bit signal
  (MSB in control changes 0-31)

- can be extended quite a bit thanks to NRPNs

** Questionable properties

- the bandwidth was limited initially (transport through wires)
  .. with move to Ethernet and USB this is not true anymore. This
  influenced some design decisions (compression through running
  status, the use of 7-bit only control changes) because it limited
  performances.

- running status makes the design complex and makes it harder to
  implement variable length messages

- the protocol defines a basic purely technological standard that is
  understood by many, however the MMA also sets another standard on
  top of it that can only be dealt with conventions. For example: "The
  Control Change message is generally used for modifying tones with a
  controller other than a keyboard key. It is not for setting
  synthesizer parameters such as VCF cut-off, envelope decay
  etc. There are exceptions to the use of the Control Change such as
  the special Bank Select message and the RPN/NRPN messages (listed
  below)" or the fact that control changes 0-32 and 33-63 were meant
  to define 32 14-bit control change signals in the first place.

- many people relied on secondary source of information about the
  protocol, thus reducing the impact of its conventions in particular
  for pure software implementations.

- basic data type is a 7-bit integer. Some controls (pitch-bend) and
  the first 32 control change controllers are intended to be 14-bit
  however this is rarely practiced/understood. Some complain about not
  enough resolution: this can be easily shown by ramping a frequency
  signal as a 7-bit number. A 14-bit control signal really helps.

- channels and control numbers are a nice addressing scheme, but as
  users do we really want to deal with these abstractions at all?

- why are there so many limitations such as number of available
  controls, channels etc..

- NRPN is a scheme to extend the controller count to 16384 different
  values.. but it requires a more expensive parsing

** Failures

Manufacturers of software and hardware devices can and routinely
ignore some of the MIDI detailed specification. Their platforms obey
the technical standard (i.e. they will not send malformed messages)
however the conventions set by the MMA are not followed. Examples:

- In the standard, CC 32-63 are meant to be the fractional part of the
  14-bit CC 00-31. This is ignored sometimes and manufacturers define
  separate controls in that range.

- CC are normally reserved for the MIDI standard. All other synthesis
  parameters were meant to be sent via the Non Registered Parameter
  Number (NRPN) mechanism, which defines 16384 fully assignable
  controller numbers, all 14-bit big.

  Since many cheap control surfaces don't support these, and only
  address the standard CC numbers, custom controls are routinely
  defined in the Undefined CC numbers area, including the LSB are of
  CC 32-63.

* 14-bit controllers

Known controllers and devices able to deal and produce 14-bit control
changes:

- Moog Little/Slip Phatty (Moog OS3.1)
- BCR 2000
- http://forum.cockos.com/project.php?issueid=4471
- U-ze Zebra2 and Diva support 14-bit midi CC# pairs
- Alesis Andromeda A6 reportedly (uses NRPN controls)

* NRPN capable controllers

- the cheap ones don't do it
- it seems a bit intended (NRPN vs control changes i.e. Individual synthesis parameters vs Macro parameters)

* Synchronizing Audio and Control signals

Performance data (MIDI controls) in MIDI is meant to be realtime. To
achieve perfect audio synchronization the timestamps between audio
signals and MIDI control streams should agree. This is however not
supported by the basic protocol. RTP-MIDI, USB and Firewire transports
have this capability.

mLan by Yamaha was an attempt to solve this by carrying audio and
control signals together over Firewire.

Bundling control signals with their media is a known way to achieve
easy and precise synch, rarely done in practice. (Some products exist
to convert MIDI to audio signal to do this)

* Device discovery

Couldn't device say "Hello, I am a moog, and I listen to these
messages" (This is in the MIDI world done by users reading the MIDI
Implementation table)

- MIDI exists in music editing software so you can work
  (play/record/replay) with external devices.

- Emagic SoundDiver 3.0 was able to automatically detect some MIDI
  devices.

- There is a SYSEX (Device Inquiry) to find out about a MIDI device

* RTP MIDI

A positive development. Succeeds where Yamaha's mLan (IEC 61883-6)
failed. Combined with Zeroconf / Bonjour, allows discovery of
IP devices supporting RTP MIDI.

* OSC

- No clear structure / namespace
- Needs convention / standardization of the same form as MIDI has
  seen. And this is hard (even for the MMA.)
- Its insistence on arbitrary timestamps can be interpreted as
  imposing sequencing capabilities onto every receiver of OSC
  messages, which makes each receiver more complicated.

* Bibliography

- http://www.midi.org/aboutus/news/hd.php
- http://www.kissbox.nl/downloads/Manuals/KissBox_CPU_V3_OEM_RTP-MIDI_HD_Integration_Manual.pdf
- http://focusritedevelopmentteam.wordpress.com/2012/10/24/we-hate-midi-we-love-midi/
- user BenKissBox
- http://madamebutterface.com/assets/documents/MIDI%201.0%20Detailed%20Specification.pdf
- Fabian Giesen 2014 http://fgiesen.wordpress.com/2014/03/23/networks-all-the-way-down/
- Moog OS3.1 http://www.moogmusic.com/OSv3.1
