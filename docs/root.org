#+TITLE: MIDI: past, present, future

* HD (2005-present)

HD is the successor to MIDI. It is developed behind closed doors by the HD
Working Group (HDWG) at the MIDI Manufacturers Association (MMA.)

An opinion:

#+BEGIN_QUOTE
"HD-MIDI promises to be improved and more versatile, and does so by
adding complexity in ways that not everybody will find
useful. HD-MIDI, at least, has industry consensus. If it is
sufficiently more effective than MIDI 1.0, it may yet form part of a
complete next-generation protocol.
#+END_QUOTE
Ben Supper / Novation/Focusrite (2012)

** Proofs of life:
- Demonstrated to some manufacturers on January 27, 2013.
- http://www.midi.org/aboutus/news/hd.php
- [[http://www.kissbox.nl/downloads/Manuals/KissBox_CPU_V3_OEM_RTP-MIDI_HD_Integration_Manual.pdf][Kissbox CM-MIDI]] claims support for the HD Protocol already (only for
  members of the HDWG)
- Photo of a HD <-> CV interface HDCV88 http://www.muffwiggler.com/forum/viewtopic.php?t=49278&start=10&sid=d16d268b318c7cd3119093f590ce832d

Known hardware implementation: KissBox Network CPU / Kissbox / B.Bouchez / (20/02/2014)

#+BEGIN_QUOTE
access to HD firmware is restricted to MMA HDWG members until official publication of HD protocol
specification
#+END_QUOTE

** Protocol

- higher resolution controls (16bit)
- traditional notes as well as direct pitch notes
- note update for per-note controls (control+pitch)
- messages composed of 32 bits words, variable length
- no marker to identify the first word of a message
- both real time messages and timestamped messages (with "bundles" at the same timestamp)

** Devices

- MIDI Device compatibility (how is unclear)
- Plug & play of devices
- messages for saving/restoring state of an HD network (dump settings from an "entity")

** Transport

- more throughput
- transports: USB, Ethernet
- dedicated transport protocol (USB + some protocol compatible with RTP-MIDI, while being independent)

* Past&Present: MIDI

Was initiated by Dave Smith at sequential instrument and emerged from
a collaboration with Oberheim, Roland. Robert Moog published the first
paper with the specs. Predecessor protocols: Roland DCB, Dave Smith's
USI.

** Why did it succeed?

- it was cheap
- it was good enough
- it provided some musical structure
- escaping (SYSEX) was possible
- serial, point to point network (basically what all technologies
  moved to today (Fabian Giesen 2014))
- undefined status bytes are ignored i.e. are safe to use with older hardware
- MIDI thru is a plain copy i.e. forward compatible

** Other characteristics

- the protocol influenced user interfaces a great deal (concepts such
  as channels, ports, cc(s) numbers, the piano roll

- graceful degradation of 14-bit capable controllers to a 7-bit signal
  (MSB in control changes 0-31)

- can be extended quite a bit thanks to NRPNs

** Questionable properties

- limited throughput with traditional wire transport. This
  unfortunately influenced some design decisions.
- but, greater throughput achieved with Ethernet/Wifi and USB

- running status makes the design complex and makes it harder to
  implement variable length messages

- many people relied on secondary source of information about the
  protocol, thus reducing the impact of its conventions in particular
  for pure software implementations.

- basic data type is a 7-bit integer. Some controls (pitch-bend) and
  the first 32 control change controllers are intended to be 14-bit
  however this is rarely practiced/understood. Some complain about not
  enough resolution: this can be easily shown by ramping a frequency
  signal as a 7-bit number. A 14-bit control signal really helps.

- channels and control numbers are a nice addressing scheme, but as
  users do we really want to deal with these abstractions at all?

- why are there so many limitations such as number of available
  controls, channels etc..

- NRPN is a scheme to extend the controller count to 16384 different
  values.. but it requires a more expensive parsing

The protocol defines a basic purely technological standard that is
understood by many. The MMA also sets another standard on top of it
that can only be dealt with conventions.

For example:

#+BEGIN_QUOTE 
The Control Change message is generally used for modifying tones with
a controller other than a keyboard key. It is not for setting
synthesizer parameters such as VCF cut-off, envelope decay etc. There
are exceptions to the use of the Control Change such as the special
Bank Select message and the RPN/NRPN messages (listed below)" or the
fact that control changes 0-32 and 33-63 were meant to define 32
14-bit control change signals in the first place.
#+END_QUOTE


** Failures

Manufacturers of software and hardware devices can and routinely
ignore some of the MIDI detailed specification. Their platforms obey
the technical standard (i.e. they will not send malformed messages)
however the conventions set by the MMA are not followed. Examples:

- In the standard, CC 32-63 are meant to be the fractional part of the
  14-bit CC 00-31. This is ignored sometimes and manufacturers define
  separate controls in that range.

- CC are normally reserved for the MIDI standard. All other synthesis
  parameters were meant to be sent via the Non Registered Parameter
  Number (NRPN) mechanism, which defines 16384 fully assignable
  controller numbers, all 14-bit big.

  Since many cheap control surfaces don't support these, and only
  address the standard CC numbers, custom controls are routinely
  defined in the Undefined CC numbers area, including the LSB are of
  CC 32-63.

It's as if everyone talked some form of "international english" with
none of the subtleties and sophistication of a local culture. It could
be due the reclusive nature of the MMA (it's a club, after all)
compared to the relative simplicity of interpreting/speaking the MIDI
language.

*** 14-bit encoders don't work well

The standard says:

#+BEGIN_QUOTE
If 128 steps of resolution is sufficient, the second byte (LSB) can
be ommited. If both the MSB and LSB are sent initially, a subsequent
fine adjustment only requires the sending of the LSB. The MSB does not
have to be retransmitted. If a subsequent major adjustment is
necessary, the MSB must be transmitted again. When an MSB is received,
the receiver should set its concept of the LSB to zero
#+END_QUOTE

This maps well to having two controllers (one for fine adjustments and another for coarse)

However the fact that the MSB reset the value to zero creates problem when doing the following sequence of changes:

For the sequence: 125.32 -> 126.64 sent on CC 0

| operation |  state | comment  |
|-----------+--------+----------|
| <initial> | 125.32 |          |
| CC 0 126  |  126.0 | artifact |
| CC 20 64  | 126.64 |          |

If instead we had done:

| operation |  state | comment         |
|-----------+--------+-----------------|
| <initial> | 125.32 |                 |
| CC 20 64  | 125.64 | incorrect value |
| CC 0 126  | 126.00 | incorrect value |

On the other hand, if the standard had instead stated that the MSB
must always be sent after an LSB has been changed, and that the LSB
value is taken into account only from that point, then we could have
had:

| operation |  state | comment |
|-----------+--------+---------|
| <initial> | 125.32 |         |
| CC 20 64  |        |         |
| CC 0 126  | 126.64 |         |

A workaround would be to delay the interpretation of the MSB and
look-ahead if the LSB has been received in the same short frame. This
would remove the artifact shown above, at the price of a more
expensive logic. (try implementing that in Max!)

So all in all simple interpretation of 14-bit can lead to artifacts
due to the way the standard has been set.

* Hardware

** 14-bit controllers

Known controllers and devices able to deal and produce 14-bit control
changes:

- Moog Little/Slip Phatty (Moog OS3.1)
- BCR 2000
- http://forum.cockos.com/project.php?issueid=4471
- U-ze Zebra2 and Diva support 14-bit midi CC# pairs
- Alesis Andromeda A6 reportedly (uses NRPN controls)

** NRPN capable controllers

- the cheap ones don't do it
- it seems a bit intended (NRPN vs control changes i.e. Individual synthesis parameters vs Macro parameters)

* Synchronizing Audio and Control signals

Performance data (MIDI controls) in MIDI is meant to be realtime. To
achieve perfect audio synchronization the timestamps between audio
signals and MIDI control streams should agree. This is however not
supported by the basic protocol. RTP-MIDI, USB and Firewire transports
have this capability.

mLan by Yamaha was an attempt to solve this by carrying audio and
control signals together over Firewire.

Bundling control signals with their media is a known way to achieve
easy and precise synch, rarely done in practice. (Some products exist
to convert MIDI to audio signal to do this)

* Device discovery

Couldn't device say "Hello, I am a moog, and I listen to these
messages" (This is in the MIDI world done by users reading the MIDI
Implementation table)

- MIDI exists in music editing software so you can work
  (play/record/replay) with external devices.

- Emagic SoundDiver 3.0 was able to automatically detect some MIDI
  devices.

- There is a SYSEX (Device Inquiry) to find out about a MIDI device

* RTP MIDI

A positive development. Succeeds where Yamaha's mLan (IEC 61883-6)
failed. Combined with Zeroconf / Bonjour, allows discovery of
IP devices supporting RTP MIDI.

* Some words about OSC

- No clear structure / namespace
- Needs convention / standardization of the same form as MIDI has
  seen. And this is hard (even for the MMA.)
- Its insistence on arbitrary timestamps can be interpreted as
  imposing sequencing capabilities onto every receiver of OSC
  messages, which makes each receiver more complicated.

- The addressing scheme, based on text, would support a standard of
  control-types much better than the abstract controller numbers of
  MIDI. (it's harder to ignore that "/volume" controls the volume of a
  device and repurpose it to control a frequency cut-off than mapping
  an abstract control number 7 to it) This assumes some moderate
  english proficiency.

* Bibliography

- http://www.midi.org/aboutus/news/hd.php
- http://www.kissbox.nl/downloads/Manuals/KissBox_CPU_V3_OEM_RTP-MIDI_HD_Integration_Manual.pdf
- http://focusritedevelopmentteam.wordpress.com/2012/10/24/we-hate-midi-we-love-midi/
- user BenKissBox
- http://madamebutterface.com/assets/documents/MIDI%201.0%20Detailed%20Specification.pdf
- Fabian Giesen 2014 http://fgiesen.wordpress.com/2014/03/23/networks-all-the-way-down/
- Moog OS3.1 http://www.moogmusic.com/OSv3.1

